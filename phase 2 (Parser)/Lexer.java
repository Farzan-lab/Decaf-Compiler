// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: standalone.flex


import java.io.*;
import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHAR = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00\1\u4f00\1\u5000"+
    "\1\u5100\1\u5200\3\u0100\1\u5300\1\u5400\1\u5500\12\u1f00\4\u0100"+
    "\1\u5600\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900"+
    "\2\u1f00\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00"+
    "\42\u1f00\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\24\u1f00\1\u6200"+
    "\1\u6300\1\u1f00\1\u6400\1\u6500\1\u6600\1\u6700\2\u1f00\1\u6800"+
    "\5\u1f00\1\u6900\1\u6a00\1\u6b00\5\u1f00\1\u6c00\1\u6d00\2\u1f00"+
    "\1\u6e00\1\u1f00\1\u6f00\14\u1f00\1\u7000\4\u1f00\246\u0100\1\u7100"+
    "\20\u0100\1\u7200\1\u7300\25\u0100\1\u7400\34\u0100\1\u7500\14\u1f00"+
    "\2\u0100\1\u7600\5\u1f00\23\u0100\1\u7700\u0aec\u1f00\1\u7800\1\u7900"+
    "\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\7\1\10\1\11\1\6\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\11\27\1\30\1\31\1\32\1\33\1\34\2\6"+
    "\1\35\3\36\1\37\1\36\2\12\1\40\2\12\1\41"+
    "\1\12\1\42\1\12\1\43\1\12\1\44\1\45\1\12"+
    "\1\46\2\12\1\47\2\12\1\50\1\51\1\52\1\53"+
    "\1\54\1\6\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\12\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\12\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110"+
    "\6\0\1\111\32\0\2\6\4\12\4\6\1\12\2\6"+
    "\1\0\7\6\1\12\4\6\1\12\5\6\27\12\1\6"+
    "\37\12\1\6\u01ca\12\4\6\14\12\16\6\5\12\7\6"+
    "\1\12\1\6\1\12\21\6\160\0\5\12\1\6\2\12"+
    "\2\6\4\12\1\6\1\12\6\6\1\12\1\6\3\12"+
    "\1\6\1\12\1\6\24\12\1\6\123\12\1\6\213\12"+
    "\1\6\5\0\2\6\246\12\1\6\46\12\2\6\1\12"+
    "\6\6\51\12\6\6\1\12\1\6\55\0\1\6\1\0"+
    "\1\6\2\0\1\6\2\0\1\6\1\0\10\6\33\12"+
    "\4\6\4\12\15\6\6\0\5\6\1\12\4\6\13\0"+
    "\1\6\1\0\3\6\53\12\37\0\4\6\2\12\1\0"+
    "\143\12\1\6\1\12\10\0\1\6\6\0\2\12\2\0"+
    "\1\6\4\0\2\12\12\0\3\12\2\6\1\12\17\6"+
    "\1\0\1\12\1\0\36\12\33\0\2\6\131\12\13\0"+
    "\1\12\16\6\12\0\41\12\11\0\2\12\4\6\1\12"+
    "\2\6\1\0\30\12\4\0\1\12\11\0\1\12\3\0"+
    "\1\12\5\0\22\6\31\12\3\0\4\6\13\12\65\6"+
    "\25\12\1\6\22\12\13\6\61\0\66\12\3\0\1\12"+
    "\22\0\1\12\7\0\12\12\2\0\2\6\12\0\1\6"+
    "\20\12\3\0\1\6\10\12\2\6\2\12\2\6\26\12"+
    "\1\6\7\12\1\6\1\12\3\6\4\12\2\6\1\0"+
    "\1\12\7\0\2\6\2\0\2\6\3\0\1\12\10\6"+
    "\1\0\4\6\2\12\1\6\3\12\2\0\2\6\12\0"+
    "\4\12\7\6\2\12\1\6\1\0\2\6\3\0\1\6"+
    "\6\12\4\6\2\12\2\6\26\12\1\6\7\12\1\6"+
    "\2\12\1\6\2\12\1\6\2\12\2\6\1\0\1\6"+
    "\5\0\4\6\2\0\2\6\3\0\3\6\1\0\7\6"+
    "\4\12\1\6\1\12\7\6\14\0\3\12\1\0\13\6"+
    "\3\0\1\6\11\12\1\6\3\12\1\6\26\12\1\6"+
    "\7\12\1\6\2\12\1\6\5\12\2\6\1\0\1\12"+
    "\10\0\1\6\3\0\1\6\3\0\2\6\1\12\17\6"+
    "\2\12\2\0\2\6\12\0\1\6\1\12\7\6\1\12"+
    "\6\0\1\6\3\0\1\6\10\12\2\6\2\12\2\6"+
    "\26\12\1\6\7\12\1\6\2\12\1\6\5\12\2\6"+
    "\1\0\1\12\7\0\2\6\2\0\2\6\3\0\7\6"+
    "\3\0\4\6\2\12\1\6\3\12\2\0\2\6\12\0"+
    "\1\6\1\12\20\6\1\0\1\12\1\6\6\12\3\6"+
    "\3\12\1\6\4\12\3\6\2\12\1\6\1\12\1\6"+
    "\2\12\3\6\2\12\3\6\3\12\3\6\14\12\4\6"+
    "\5\0\3\6\3\0\1\6\4\0\2\6\1\12\6\6"+
    "\1\0\16\6\12\0\11\6\1\12\6\6\5\0\10\12"+
    "\1\6\3\12\1\6\27\12\1\6\20\12\3\6\1\12"+
    "\7\0\1\6\3\0\1\6\4\0\7\6\2\0\1\6"+
    "\3\12\5\6\2\12\2\0\2\6\12\0\20\6\1\12"+
    "\3\0\1\6\10\12\1\6\3\12\1\6\27\12\1\6"+
    "\12\12\1\6\5\12\2\6\1\0\1\12\7\0\1\6"+
    "\3\0\1\6\4\0\7\6\2\0\7\6\1\12\1\6"+
    "\2\12\2\0\2\6\12\0\1\6\2\12\15\6\4\0"+
    "\11\12\1\6\3\12\1\6\51\12\2\0\1\12\7\0"+
    "\1\6\3\0\1\6\4\0\1\12\5\6\3\12\1\0"+
    "\7\6\3\12\2\0\2\6\12\0\12\6\6\12\1\6"+
    "\3\0\1\6\22\12\3\6\30\12\1\6\11\12\1\6"+
    "\1\12\2\6\7\12\3\6\1\0\4\6\6\0\1\6"+
    "\1\0\1\6\10\0\6\6\12\0\2\6\2\0\15\6"+
    "\60\12\1\0\2\12\7\0\4\6\10\12\10\0\1\6"+
    "\12\0\47\6\2\12\1\6\1\12\1\6\5\12\1\6"+
    "\30\12\1\6\1\12\1\6\12\12\1\0\2\12\11\0"+
    "\1\12\2\6\5\12\1\6\1\12\1\6\6\0\2\6"+
    "\12\0\2\6\4\12\40\6\1\12\27\6\2\0\6\6"+
    "\12\0\13\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\2\0\10\12\1\6\44\12\4\6\24\0\1\6\2\0"+
    "\5\12\13\0\1\6\44\0\11\6\1\0\71\6\53\12"+
    "\24\0\1\12\12\0\6\6\6\12\4\0\4\12\3\0"+
    "\1\12\3\0\2\12\7\0\3\12\4\0\15\12\14\0"+
    "\1\12\17\0\2\6\46\12\1\6\1\12\5\6\1\12"+
    "\2\6\53\12\1\6\115\12\1\6\4\12\2\6\7\12"+
    "\1\6\1\12\1\6\4\12\2\6\51\12\1\6\4\12"+
    "\2\6\41\12\1\6\4\12\2\6\7\12\1\6\1\12"+
    "\1\6\4\12\2\6\17\12\1\6\71\12\1\6\4\12"+
    "\2\6\103\12\2\6\3\0\40\6\20\12\20\6\126\12"+
    "\2\6\6\12\3\6\u016c\12\2\6\21\12\1\6\32\12"+
    "\5\6\113\12\3\6\13\12\7\6\15\12\1\6\4\12"+
    "\3\0\13\6\22\12\3\0\13\6\22\12\2\0\14\6"+
    "\15\12\1\6\3\12\1\6\2\0\14\6\64\12\40\0"+
    "\3\6\1\12\3\6\2\12\1\0\2\6\12\0\41\6"+
    "\4\0\1\6\12\0\6\6\131\12\7\6\5\12\2\0"+
    "\42\12\1\0\1\12\5\6\106\12\12\6\37\12\1\6"+
    "\14\0\4\6\14\0\12\6\12\0\36\12\2\6\5\12"+
    "\13\6\54\12\4\6\32\12\6\6\12\0\46\6\27\12"+
    "\5\0\4\6\65\12\12\0\1\6\35\0\2\6\13\0"+
    "\6\6\12\0\15\6\1\12\10\6\16\0\1\6\2\0"+
    "\77\6\5\0\57\12\21\0\7\12\4\6\12\0\21\6"+
    "\11\0\14\6\3\0\36\12\15\0\2\12\12\0\54\12"+
    "\16\0\14\6\44\12\24\0\10\6\12\0\3\6\3\12"+
    "\12\0\44\12\2\6\11\12\7\6\53\12\2\6\3\12"+
    "\20\6\3\0\1\6\25\0\4\12\1\0\6\12\1\0"+
    "\2\12\3\0\1\12\5\6\300\12\72\0\1\6\5\0"+
    "\26\12\2\6\6\12\2\6\46\12\2\6\6\12\2\6"+
    "\10\12\1\6\1\12\1\6\1\12\1\6\1\12\1\6"+
    "\37\12\2\6\65\12\1\6\7\12\1\6\1\12\3\6"+
    "\3\12\1\6\7\12\3\6\4\12\2\6\6\12\4\6"+
    "\15\12\5\6\3\12\1\6\7\12\16\6\5\0\30\6"+
    "\2\3\5\0\20\6\2\12\23\6\1\12\13\6\5\0"+
    "\1\6\12\0\1\6\1\12\15\6\1\12\20\6\15\12"+
    "\3\6\40\12\20\6\15\0\4\6\1\0\3\6\14\0"+
    "\21\6\1\12\4\6\1\12\2\6\12\12\1\6\1\12"+
    "\3\6\5\12\6\6\1\12\1\6\1\12\1\6\1\12"+
    "\1\6\4\12\1\6\13\12\2\6\4\12\5\6\5\12"+
    "\4\6\1\12\21\6\51\12\u0177\6\57\12\1\6\57\12"+
    "\1\6\205\12\6\6\4\12\3\0\2\12\14\6\46\12"+
    "\1\6\1\12\5\6\1\12\2\6\70\12\7\6\1\12"+
    "\17\6\1\0\27\12\11\6\7\12\1\6\7\12\1\6"+
    "\7\12\1\6\7\12\1\6\7\12\1\6\7\12\1\6"+
    "\7\12\1\6\7\12\1\6\40\0\57\6\1\12\325\6"+
    "\3\12\31\6\11\12\6\0\1\6\5\12\2\6\5\12"+
    "\4\6\126\12\2\6\2\0\2\6\3\12\1\6\132\12"+
    "\1\6\4\12\5\6\53\12\1\6\136\12\21\6\40\12"+
    "\60\6\320\12\100\6\375\12\3\6\215\12\103\6\56\12"+
    "\2\6\15\12\3\6\20\12\12\0\2\12\24\6\57\12"+
    "\1\0\4\6\12\0\1\6\37\12\2\0\120\12\2\0"+
    "\45\6\11\12\2\6\147\12\2\6\65\12\2\6\11\12"+
    "\52\6\15\12\1\0\3\12\1\0\4\12\1\0\27\12"+
    "\5\0\4\6\1\0\13\6\1\12\7\6\64\12\14\6"+
    "\2\0\62\12\22\0\12\6\12\0\6\6\22\0\6\12"+
    "\3\6\1\12\1\6\2\12\13\0\34\12\10\0\2\6"+
    "\27\12\15\0\14\6\35\12\3\6\4\0\57\12\16\0"+
    "\16\6\1\12\12\0\6\6\5\12\1\0\12\12\12\0"+
    "\5\12\1\6\51\12\16\0\11\6\3\12\1\0\10\12"+
    "\2\0\2\6\12\0\6\6\27\12\3\6\1\12\3\0"+
    "\62\12\1\0\1\12\3\0\2\12\2\0\5\12\2\0"+
    "\1\12\1\0\1\12\30\6\3\12\2\6\13\12\5\0"+
    "\2\6\3\12\2\0\12\6\6\12\2\6\6\12\2\6"+
    "\6\12\11\6\7\12\1\6\7\12\1\6\53\12\1\6"+
    "\16\12\6\6\163\12\10\0\1\6\2\0\2\6\12\0"+
    "\6\6\244\12\14\6\27\12\4\6\61\12\4\6\u0100\3"+
    "\156\12\2\6\152\12\46\6\7\12\14\6\5\12\5\6"+
    "\1\12\1\0\12\12\1\6\15\12\1\6\5\12\1\6"+
    "\1\12\1\6\2\12\1\6\2\12\1\6\154\12\41\6"+
    "\153\12\22\6\100\12\2\6\66\12\50\6\15\12\3\6"+
    "\20\0\20\6\20\0\3\6\2\12\30\6\3\12\31\6"+
    "\1\12\6\6\5\12\1\6\207\12\2\6\1\0\4\6"+
    "\1\12\13\6\12\0\7\6\32\12\4\6\1\12\1\6"+
    "\32\12\13\6\131\12\3\6\6\12\2\6\6\12\2\6"+
    "\6\12\2\6\3\12\3\6\2\12\3\6\2\12\22\6"+
    "\3\0\4\6\14\12\1\6\32\12\1\6\23\12\1\6"+
    "\2\12\1\6\17\12\2\6\16\12\42\6\173\12\105\6"+
    "\65\12\210\6\1\0\202\6\35\12\3\6\61\12\17\6"+
    "\1\0\37\6\40\12\15\6\36\12\5\6\46\12\5\0"+
    "\5\6\36\12\2\6\44\12\4\6\10\12\1\6\5\12"+
    "\52\6\236\12\2\6\12\0\6\6\44\12\4\6\44\12"+
    "\4\6\50\12\10\6\64\12\234\6\67\12\11\6\26\12"+
    "\12\6\10\12\230\6\6\12\2\6\1\12\1\6\54\12"+
    "\1\6\2\12\3\6\1\12\2\6\27\12\12\6\27\12"+
    "\11\6\37\12\101\6\23\12\1\6\2\12\12\6\26\12"+
    "\12\6\32\12\106\6\70\12\6\6\2\12\100\6\1\12"+
    "\3\0\1\6\2\0\5\6\4\0\4\12\1\6\3\12"+
    "\1\6\35\12\2\6\3\0\4\6\1\0\40\6\35\12"+
    "\3\6\35\12\43\6\10\12\1\6\34\12\2\0\31\6"+
    "\66\12\12\6\26\12\12\6\23\12\15\6\22\12\156\6"+
    "\111\12\67\6\63\12\15\6\63\12\15\6\44\12\4\0"+
    "\10\6\12\0\u0146\6\52\12\1\6\2\0\3\6\2\12"+
    "\116\6\35\12\12\6\1\12\10\6\26\12\13\0\137\6"+
    "\25\12\33\6\27\12\11\6\3\0\65\12\17\0\37\6"+
    "\12\0\17\6\4\0\55\12\13\0\2\6\1\0\17\6"+
    "\1\0\2\6\31\12\7\6\12\0\6\6\3\0\44\12"+
    "\16\0\1\6\12\0\4\6\1\12\2\0\1\12\10\6"+
    "\43\12\1\0\2\6\1\12\11\6\3\0\60\12\16\0"+
    "\4\12\4\6\4\0\1\6\14\0\1\12\1\6\1\12"+
    "\43\6\22\12\1\6\31\12\14\0\6\6\1\0\101\6"+
    "\7\12\1\6\1\12\1\6\4\12\1\6\17\12\1\6"+
    "\12\12\7\6\57\12\14\0\5\6\12\0\6\6\4\0"+
    "\1\6\10\12\2\6\2\12\2\6\26\12\1\6\7\12"+
    "\1\6\2\12\1\6\5\12\1\6\2\0\1\12\7\0"+
    "\2\6\2\0\2\6\3\0\2\6\1\12\6\6\1\0"+
    "\5\6\5\12\2\0\2\6\7\0\3\6\5\0\213\6"+
    "\65\12\22\0\4\12\5\6\12\0\4\6\1\0\3\12"+
    "\36\6\60\12\24\0\2\12\1\6\1\12\10\6\12\0"+
    "\246\6\57\12\7\0\2\6\11\0\27\6\4\12\2\0"+
    "\42\6\60\12\21\0\3\6\1\12\13\6\12\0\46\6"+
    "\53\12\15\0\1\12\7\6\12\0\66\6\33\12\2\6"+
    "\17\0\4\6\12\0\306\6\54\12\17\0\145\6\100\12"+
    "\12\0\25\6\10\12\2\6\1\12\2\6\10\12\1\6"+
    "\2\12\1\6\30\12\6\0\1\6\2\0\2\6\4\0"+
    "\1\12\1\0\1\12\2\0\14\6\12\0\106\6\10\12"+
    "\2\6\47\12\7\0\2\6\7\0\1\12\1\6\1\12"+
    "\1\0\33\6\1\12\12\0\50\12\7\0\1\12\4\0"+
    "\10\6\1\0\10\6\1\12\13\0\56\12\20\0\3\6"+
    "\1\12\42\6\71\12\7\6\11\12\1\6\45\12\10\0"+
    "\1\6\10\0\1\12\17\6\12\0\30\6\36\12\2\6"+
    "\26\0\1\6\16\0\111\6\7\12\1\6\2\12\1\6"+
    "\46\12\6\0\3\6\1\0\1\6\2\0\1\6\7\0"+
    "\1\12\1\0\10\6\12\0\6\6\6\12\1\6\2\12"+
    "\1\6\40\12\5\0\1\6\2\0\1\6\5\0\1\12"+
    "\7\6\12\0\u0136\6\23\12\4\0\271\6\1\12\54\6"+
    "\4\12\37\6\232\12\146\6\157\12\21\6\304\12\274\6"+
    "\57\12\1\6\11\0\307\6\107\12\271\6\71\12\7\6"+
    "\37\12\1\6\12\0\146\6\36\12\2\6\5\0\13\6"+
    "\60\12\7\0\11\6\4\12\14\6\12\0\11\6\25\12"+
    "\5\6\23\12\260\6\100\12\200\6\113\12\4\6\1\0"+
    "\1\12\67\0\7\6\4\0\15\12\100\6\2\12\1\6"+
    "\1\12\1\0\13\6\2\0\16\6\370\12\10\6\326\12"+
    "\52\6\11\12\367\6\37\12\61\6\3\12\21\6\4\12"+
    "\10\6\u018c\12\4\6\153\12\5\6\15\12\3\6\11\12"+
    "\7\6\12\12\3\6\2\0\1\6\4\0\301\6\5\0"+
    "\3\6\26\0\2\6\7\0\36\6\4\0\224\6\3\0"+
    "\273\6\125\12\1\6\107\12\1\6\2\12\2\6\1\12"+
    "\2\6\2\12\2\6\4\12\1\6\14\12\1\6\1\12"+
    "\1\6\7\12\1\6\101\12\1\6\4\12\2\6\10\12"+
    "\1\6\7\12\1\6\34\12\1\6\4\12\1\6\5\12"+
    "\1\6\1\12\3\6\7\12\1\6\u0154\12\2\6\31\12"+
    "\1\6\31\12\1\6\37\12\1\6\31\12\1\6\37\12"+
    "\1\6\31\12\1\6\37\12\1\6\31\12\1\6\37\12"+
    "\1\6\31\12\1\6\10\12\2\6\151\0\4\6\62\0"+
    "\10\6\1\0\16\6\1\0\26\6\5\0\1\6\17\0"+
    "\120\6\7\0\1\6\21\0\2\6\7\0\1\6\2\0"+
    "\1\6\5\0\325\6\55\12\3\6\7\0\7\12\2\6"+
    "\12\0\4\6\1\12\u0171\6\54\12\16\0\5\6\306\12"+
    "\13\6\7\0\51\6\104\12\7\0\1\12\4\6\12\0"+
    "\u0156\6\1\12\117\6\4\12\1\6\33\12\1\6\2\12"+
    "\1\6\1\12\2\6\1\12\1\6\12\12\1\6\4\12"+
    "\1\6\1\12\1\6\1\12\6\6\1\12\4\6\1\12"+
    "\1\6\1\12\1\6\1\12\1\6\3\12\1\6\2\12"+
    "\1\6\1\12\2\6\1\12\1\6\1\12\1\6\1\12"+
    "\1\6\1\12\1\6\1\12\1\6\2\12\1\6\1\12"+
    "\2\6\4\12\1\6\7\12\1\6\4\12\1\6\4\12"+
    "\1\6\1\12\1\6\12\12\1\6\21\12\5\6\3\12"+
    "\1\6\5\12\1\6\21\12\u0134\6\12\0\6\6\336\12"+
    "\42\6\65\12\13\6\336\12\2\6\u0182\12\16\6\u0131\12"+
    "\37\6\36\12\342\6\113\12\266\6\1\0\36\6\140\0"+
    "\200\6\360\0\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[31232];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\0\1\2\2\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\2\22\1\23\1\24\1\25\1\26"+
    "\1\27\4\6\1\30\1\31\1\32\22\6\1\33\1\34"+
    "\1\35\1\36\1\1\1\37\1\1\1\40\1\2\2\3"+
    "\1\41\2\2\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\0\1\51\1\52\1\0\1\53\2\0\1\54"+
    "\1\55\1\56\5\6\1\57\24\6\1\60\6\6\1\61"+
    "\12\6\1\62\2\1\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\41\3\0\2\51\1\74"+
    "\2\0\2\75\24\6\1\76\3\6\1\77\2\6\1\100"+
    "\2\6\1\101\16\6\1\1\1\0\1\51\2\0\1\102"+
    "\1\74\1\75\1\103\6\6\1\104\1\6\1\105\1\6"+
    "\1\106\1\107\1\110\5\6\1\111\1\112\7\6\1\113"+
    "\1\114\1\115\10\6\1\116\1\117\1\6\1\120\1\6"+
    "\1\1\1\6\1\121\5\6\1\122\1\123\1\124\1\125"+
    "\5\6\1\126\15\6\1\127\1\130\3\6\1\131\4\6"+
    "\1\132\1\6\1\133\7\6\1\134\1\135\1\136\1\137"+
    "\1\140\1\141\6\6\1\142\1\143\1\144\2\6\1\145"+
    "\1\6\1\146\1\6\1\147\1\6\1\150\1\151\1\152"+
    "\1\153\1\154\5\6\1\155\1\156\1\6\1\157\1\160";

  private static int [] zzUnpackAction() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\112\0\224\0\336\0\336\0\u0128\0\u0172\0\336"+
    "\0\u01bc\0\336\0\u0206\0\336\0\336\0\336\0\u0250\0\u029a"+
    "\0\336\0\u02e4\0\336\0\u032e\0\u0378\0\u03c2\0\336\0\336"+
    "\0\u040c\0\u0456\0\u04a0\0\u04ea\0\u0534\0\u057e\0\u05c8\0\u0612"+
    "\0\336\0\336\0\u065c\0\u06a6\0\u06f0\0\u073a\0\u0784\0\u07ce"+
    "\0\u0818\0\u0862\0\u08ac\0\u08f6\0\u0940\0\u098a\0\u09d4\0\u0a1e"+
    "\0\u0a68\0\u0ab2\0\u0afc\0\u0b46\0\336\0\u0b90\0\336\0\336"+
    "\0\u0bda\0\336\0\u0c24\0\u0c6e\0\u0cb8\0\u0cb8\0\u0d02\0\u0cb8"+
    "\0\u0d4c\0\u0d96\0\336\0\336\0\336\0\336\0\336\0\336"+
    "\0\336\0\u0de0\0\u0e2a\0\336\0\u0e74\0\u0ebe\0\u0f08\0\u0f52"+
    "\0\336\0\336\0\336\0\u0f9c\0\u0fe6\0\u1030\0\u107a\0\u10c4"+
    "\0\336\0\u110e\0\u1158\0\u11a2\0\u11ec\0\u1236\0\u1280\0\u12ca"+
    "\0\u1314\0\u135e\0\u13a8\0\u13f2\0\u143c\0\u1486\0\u14d0\0\u151a"+
    "\0\u1564\0\u15ae\0\u15f8\0\u1642\0\u168c\0\u01bc\0\u16d6\0\u1720"+
    "\0\u176a\0\u17b4\0\u17fe\0\u1848\0\u01bc\0\u1892\0\u18dc\0\u1926"+
    "\0\u1970\0\u19ba\0\u1a04\0\u1a4e\0\u1a98\0\u1ae2\0\u1b2c\0\336"+
    "\0\u1b76\0\u1bc0\0\336\0\336\0\336\0\336\0\336\0\336"+
    "\0\336\0\336\0\336\0\336\0\u0cb8\0\u1c0a\0\u1c54\0\336"+
    "\0\u1c9e\0\u1ce8\0\u1d32\0\u1d7c\0\u1dc6\0\u1e10\0\u1e5a\0\u1ea4"+
    "\0\u1eee\0\u1f38\0\u1f82\0\u1fcc\0\u2016\0\u2060\0\u20aa\0\u20f4"+
    "\0\u213e\0\u2188\0\u21d2\0\u221c\0\u2266\0\u22b0\0\u22fa\0\u2344"+
    "\0\u238e\0\u23d8\0\u01bc\0\u2422\0\u246c\0\u24b6\0\u2500\0\u254a"+
    "\0\u2594\0\u25de\0\u2628\0\u2672\0\u01bc\0\u26bc\0\u2706\0\u2750"+
    "\0\u279a\0\u27e4\0\u282e\0\u2878\0\u28c2\0\u290c\0\u2956\0\u29a0"+
    "\0\u29ea\0\u2a34\0\u2a7e\0\u2ac8\0\u2b12\0\u1c0a\0\u2b5c\0\u2ba6"+
    "\0\u2ba6\0\u1d7c\0\u2bf0\0\u01bc\0\u2c3a\0\u2c84\0\u2cce\0\u2d18"+
    "\0\u2d62\0\u2dac\0\u01bc\0\u2df6\0\u01bc\0\u2e40\0\u01bc\0\u01bc"+
    "\0\u01bc\0\u2e8a\0\u2ed4\0\u2f1e\0\u2f68\0\u2fb2\0\u01bc\0\u01bc"+
    "\0\u2ffc\0\u3046\0\u3090\0\u30da\0\u3124\0\u316e\0\u31b8\0\u01bc"+
    "\0\u01bc\0\u01bc\0\u3202\0\u324c\0\u3296\0\u32e0\0\u332a\0\u3374"+
    "\0\u33be\0\u3408\0\u01bc\0\u01bc\0\u3452\0\u01bc\0\u349c\0\u34e6"+
    "\0\u3530\0\u01bc\0\u357a\0\u35c4\0\u360e\0\u3658\0\u36a2\0\u01bc"+
    "\0\u01bc\0\u01bc\0\u01bc\0\u36ec\0\u3736\0\u3780\0\u37ca\0\u3814"+
    "\0\u01bc\0\u385e\0\u38a8\0\u38f2\0\u393c\0\u3986\0\u39d0\0\u3a1a"+
    "\0\u3a64\0\u3aae\0\u3af8\0\u3b42\0\u3b8c\0\u3bd6\0\u01bc\0\u01bc"+
    "\0\u3c20\0\u3c6a\0\u3cb4\0\u01bc\0\u3cfe\0\u3d48\0\u3d92\0\u3ddc"+
    "\0\u01bc\0\u3e26\0\u01bc\0\u3e70\0\u3eba\0\u3f04\0\u3f4e\0\u3f98"+
    "\0\u3fe2\0\u402c\0\u01bc\0\u01bc\0\u01bc\0\u01bc\0\u01bc\0\u01bc"+
    "\0\u4076\0\u40c0\0\u410a\0\u4154\0\u419e\0\u41e8\0\u01bc\0\u01bc"+
    "\0\u01bc\0\u4232\0\u427c\0\336\0\u42c6\0\u01bc\0\u4310\0\u01bc"+
    "\0\u435a\0\u01bc\0\u01bc\0\u01bc\0\u01bc\0\u01bc\0\u43a4\0\u43ee"+
    "\0\u4438\0\u4482\0\u44cc\0\u01bc\0\u01bc\0\u4516\0\u01bc\0\u01bc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\4\1\5\1\6\1\4\1\5\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\5\11\1\34\1\35\1\36"+
    "\1\37\2\11\1\40\1\4\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\2\11\1\52\1\11"+
    "\1\53\1\11\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\3\11\1\65\1\66\1\67\1\70"+
    "\1\4\2\71\1\5\2\71\1\6\3\71\1\72\13\71"+
    "\1\73\23\71\1\74\40\71\1\75\2\76\1\75\1\76"+
    "\1\77\1\75\1\76\5\75\1\100\7\75\1\101\23\75"+
    "\1\102\40\75\114\0\1\5\142\0\1\103\56\0\1\11"+
    "\11\0\1\11\13\0\2\11\5\0\13\11\4\0\31\11"+
    "\4\0\1\11\14\0\1\104\130\0\1\105\77\0\1\106"+
    "\11\0\1\107\101\0\1\110\7\0\1\111\76\0\1\112"+
    "\4\0\1\113\5\0\1\114\56\0\2\115\4\0\16\115"+
    "\1\116\1\115\2\26\7\115\1\117\7\115\1\120\11\115"+
    "\1\117\20\115\1\120\6\115\1\0\2\115\4\0\16\115"+
    "\1\116\1\115\2\26\7\115\1\117\21\115\1\117\27\115"+
    "\34\0\1\121\111\0\1\122\111\0\1\123\56\0\1\11"+
    "\11\0\1\11\13\0\2\11\5\0\11\11\1\124\1\11"+
    "\4\0\5\11\1\125\23\11\4\0\2\11\11\0\1\11"+
    "\13\0\2\11\5\0\13\11\4\0\20\11\1\126\10\11"+
    "\4\0\2\11\11\0\1\11\13\0\2\11\5\0\13\11"+
    "\4\0\5\11\1\127\23\11\4\0\2\11\11\0\1\11"+
    "\13\0\2\11\5\0\13\11\4\0\22\11\1\130\6\11"+
    "\4\0\1\11\52\0\1\131\37\0\1\11\11\0\1\11"+
    "\13\0\2\11\5\0\13\11\4\0\1\132\30\11\4\0"+
    "\2\11\11\0\1\11\13\0\2\11\5\0\13\11\4\0"+
    "\23\11\1\133\5\11\4\0\2\11\11\0\1\11\13\0"+
    "\2\11\5\0\13\11\4\0\5\11\1\134\10\11\1\135"+
    "\1\11\1\136\1\11\1\137\6\11\4\0\2\11\11\0"+
    "\1\11\13\0\2\11\5\0\13\11\4\0\1\11\1\140"+
    "\6\11\1\141\2\11\1\142\2\11\1\143\12\11\4\0"+
    "\2\11\11\0\1\11\13\0\2\11\5\0\13\11\4\0"+
    "\5\11\1\144\10\11\1\145\3\11\1\146\6\11\4\0"+
    "\2\11\11\0\1\11\13\0\2\11\5\0\13\11\4\0"+
    "\13\11\1\147\1\11\1\150\10\11\1\151\2\11\4\0"+
    "\2\11\11\0\1\11\13\0\2\11\5\0\13\11\4\0"+
    "\1\11\1\152\11\11\1\153\2\11\1\154\4\11\1\155"+
    "\5\11\4\0\2\11\11\0\1\11\13\0\2\11\5\0"+
    "\13\11\4\0\6\11\1\156\5\11\1\157\1\160\4\11"+
    "\1\161\6\11\4\0\2\11\11\0\1\11\13\0\2\11"+
    "\5\0\13\11\4\0\16\11\1\162\12\11\4\0\2\11"+
    "\11\0\1\11\13\0\2\11\5\0\13\11\4\0\5\11"+
    "\1\163\15\11\1\164\5\11\4\0\2\11\11\0\1\11"+
    "\13\0\2\11\5\0\13\11\4\0\6\11\1\165\22\11"+
    "\4\0\2\11\11\0\1\11\13\0\2\11\5\0\13\11"+
    "\4\0\20\11\1\166\2\11\1\167\5\11\4\0\2\11"+
    "\11\0\1\11\13\0\2\11\5\0\13\11\4\0\5\11"+
    "\1\170\23\11\4\0\2\11\11\0\1\11\13\0\2\11"+
    "\5\0\13\11\4\0\11\11\1\171\13\11\1\172\3\11"+
    "\4\0\2\11\11\0\1\11\13\0\2\11\5\0\13\11"+
    "\4\0\10\11\1\173\7\11\1\174\10\11\4\0\2\11"+
    "\11\0\1\11\13\0\2\11\5\0\13\11\4\0\15\11"+
    "\1\175\13\11\4\0\2\11\11\0\1\11\13\0\2\11"+
    "\5\0\13\11\4\0\16\11\1\176\12\11\4\0\2\11"+
    "\11\0\1\11\13\0\2\11\5\0\13\11\4\0\10\11"+
    "\1\177\20\11\4\0\1\11\106\0\1\200\3\0\2\71"+
    "\1\0\2\71\1\0\3\71\1\0\37\71\1\0\42\71"+
    "\1\0\2\71\1\0\3\71\1\0\6\71\1\201\4\71"+
    "\1\202\23\71\1\0\40\71\11\0\1\203\3\0\1\204"+
    "\10\0\1\205\27\0\1\206\3\0\1\207\6\0\1\210"+
    "\2\0\1\211\1\0\1\212\1\0\1\213\26\0\1\214"+
    "\76\0\1\5\12\0\1\214\111\0\1\214\2\0\1\112"+
    "\4\0\1\113\75\0\1\215\3\0\1\100\10\0\1\215"+
    "\22\0\1\215\4\0\1\215\3\0\1\215\6\0\1\215"+
    "\2\0\1\215\1\0\1\215\1\0\1\215\11\0\20\216"+
    "\1\217\71\216\2\113\1\220\2\113\1\221\104\113\26\0"+
    "\2\222\110\0\2\116\7\0\1\223\21\0\1\223\51\0"+
    "\1\224\1\0\1\224\2\0\2\222\110\0\2\225\5\0"+
    "\3\226\15\0\6\226\27\0\1\11\11\0\1\11\13\0"+
    "\2\11\5\0\4\11\1\227\6\11\4\0\31\11\4\0"+
    "\2\11\11\0\1\11\13\0\2\11\5\0\13\11\4\0"+
    "\25\11\1\230\3\11\4\0\2\11\11\0\1\11\13\0"+
    "\2\11\5\0\13\11\4\0\11\11\1\231\17\11\4\0"+
    "\2\11\11\0\1\11\13\0\2\11\5\0\13\11\4\0"+
    "\1\11\1\232\27\11\4\0\2\11\11\0\1\11\13\0"+
    "\2\11\5\0\13\11\4\0\20\11\1\233\10\11\4\0"+
    "\2\11\11\0\1\11\13\0\2\11\5\0\13\11\4\0"+
    "\6\11\1\234\4\11\1\235\15\11\4\0\2\11\11\0"+
    "\1\11\13\0\2\11\5\0\13\11\4\0\22\11\1\236"+
    "\6\11\4\0\2\11\11\0\1\11\13\0\2\11\5\0"+
    "\13\11\4\0\7\11\1\237\21\11\4\0\2\11\11\0"+
    "\1\11\13\0\2\11\5\0\13\11\4\0\16\11\1\240"+
    "\12\11\4\0\2\11\11\0\1\11\13\0\2\11\5\0"+
    "\13\11\4\0\5\11\1\241\23\11\4\0\2\11\11\0"+
    "\1\11\13\0\2\11\5\0\13\11\4\0\16\11\1\242"+
    "\12\11\4\0\2\11\11\0\1\11\13\0\2\11\5\0"+
    "\13\11\4\0\21\11\1\243\7\11\4\0\2\11\11\0"+
    "\1\11\13\0\2\11\5\0\13\11\4\0\1\11\1\244"+
    "\27\11\4\0\2\11\11\0\1\11\13\0\2\11\5\0"+
    "\13\11\4\0\1\11\1\245\27\11\4\0\2\11\11\0"+
    "\1\11\13\0\2\11\5\0\13\11\4\0\15\11\1\246"+
    "\13\11\4\0\2\11\11\0\1\11\13\0\2\11\5\0"+
    "\13\11\4\0\6\11\1\247\22\11\4\0\2\11\11\0"+
    "\1\11\13\0\2\11\5\0\13\11\4\0\23\11\1\250"+
    "\5\11\4\0\2\11\11\0\1\11\13\0\2\11\5\0"+
    "\13\11\4\0\16\11\1\251\12\11\4\0\2\11\11\0"+
    "\1\11\13\0\2\11\5\0\13\11\4\0\21\11\1\252"+
    "\7\11\4\0\2\11\11\0\1\11\13\0\2\11\5\0"+
    "\13\11\4\0\4\11\1\253\24\11\4\0\2\11\11\0"+
    "\1\11\13\0\2\11\5\0\13\11\4\0\22\11\1\254"+
    "\6\11\4\0\2\11\11\0\1\11\13\0\2\11\5\0"+
    "\13\11\4\0\13\11\1\255\15\11\4\0\2\11\11\0"+
    "\1\11\13\0\2\11\5\0\13\11\4\0\16\11\1\256"+
    "\12\11\4\0\2\11\11\0\1\11\13\0\2\11\5\0"+
    "\13\11\4\0\20\11\1\257\10\11\4\0\2\11\11\0"+
    "\1\11\13\0\2\11\5\0\13\11\4\0\15\11\1\260"+
    "\13\11\4\0\2\11\11\0\1\11\13\0\2\11\5\0"+
    "\13\11\4\0\17\11\1\261\11\11\4\0\2\11\11\0"+
    "\1\11\13\0\2\11\5\0\13\11\4\0\22\11\1\262"+
    "\6\11\4\0\2\11\11\0\1\11\13\0\2\11\5\0"+
    "\13\11\4\0\16\11\1\263\12\11\4\0\2\11\11\0"+
    "\1\11\13\0\2\11\5\0\13\11\4\0\15\11\1\264"+
    "\13\11\4\0\2\11\11\0\1\11\13\0\2\11\5\0"+
    "\13\11\4\0\25\11\1\265\3\11\4\0\2\11\11\0"+
    "\1\11\13\0\2\11\5\0\13\11\4\0\13\11\1\266"+
    "\15\11\4\0\2\11\11\0\1\11\13\0\2\11\5\0"+
    "\13\11\4\0\11\11\1\267\4\11\1\270\12\11\4\0"+
    "\2\11\11\0\1\11\13\0\2\11\5\0\13\11\4\0"+
    "\2\11\1\271\26\11\4\0\2\11\11\0\1\11\13\0"+
    "\2\11\5\0\13\11\4\0\3\11\1\272\13\11\1\273"+
    "\2\11\1\274\6\11\4\0\2\11\11\0\1\11\13\0"+
    "\2\11\5\0\13\11\4\0\30\11\1\275\4\0\2\11"+
    "\11\0\1\11\13\0\2\11\5\0\13\11\4\0\11\11"+
    "\1\276\17\11\4\0\2\11\11\0\1\11\13\0\2\11"+
    "\5\0\13\11\4\0\11\11\1\277\17\11\4\0\2\11"+
    "\11\0\1\11\13\0\2\11\5\0\13\11\4\0\23\11"+
    "\1\300\5\11\4\0\2\11\11\0\1\11\13\0\2\11"+
    "\5\0\13\11\4\0\22\11\1\301\6\11\4\0\2\11"+
    "\11\0\1\11\13\0\2\11\5\0\13\11\4\0\11\11"+
    "\1\302\17\11\4\0\2\11\11\0\1\11\13\0\2\11"+
    "\5\0\13\11\4\0\11\11\1\303\17\11\4\0\1\11"+
    "\2\304\1\216\2\304\1\216\3\304\1\216\37\304\1\216"+
    "\40\304\2\202\1\220\2\202\1\221\3\202\1\113\37\202"+
    "\1\113\40\202\20\216\1\305\111\216\1\305\4\216\1\306"+
    "\64\216\2\0\1\220\135\0\2\222\7\0\1\307\21\0"+
    "\1\307\51\0\1\310\1\0\1\310\2\0\2\311\110\0"+
    "\2\312\110\0\2\225\5\0\2\226\1\313\15\0\4\226"+
    "\1\313\1\226\55\0\2\226\5\0\3\226\15\0\6\226"+
    "\27\0\1\11\11\0\1\11\13\0\2\11\5\0\4\11"+
    "\1\314\6\11\4\0\31\11\4\0\2\11\11\0\1\11"+
    "\13\0\2\11\5\0\1\315\12\11\4\0\31\11\4\0"+
    "\2\11\11\0\1\11\13\0\2\11\5\0\13\11\4\0"+
    "\15\11\1\316\13\11\4\0\2\11\11\0\1\11\13\0"+
    "\2\11\5\0\13\11\4\0\4\11\1\317\24\11\4\0"+
    "\2\11\11\0\1\11\13\0\2\11\5\0\13\11\4\0"+
    "\11\11\1\320\17\11\4\0\2\11\11\0\1\11\13\0"+
    "\2\11\5\0\13\11\4\0\23\11\1\321\5\11\4\0"+
    "\2\11\11\0\1\11\13\0\2\11\5\0\13\11\4\0"+
    "\11\11\1\322\17\11\4\0\2\11\11\0\1\11\13\0"+
    "\2\11\5\0\13\11\4\0\16\11\1\323\12\11\4\0"+
    "\2\11\11\0\1\11\13\0\2\11\5\0\13\11\4\0"+
    "\11\11\1\324\17\11\4\0\2\11\11\0\1\11\13\0"+
    "\2\11\5\0\13\11\4\0\13\11\1\325\15\11\4\0"+
    "\2\11\11\0\1\11\13\0\2\11\5\0\13\11\4\0"+
    "\1\11\1\326\27\11\4\0\2\11\11\0\1\11\13\0"+
    "\2\11\5\0\13\11\4\0\11\11\1\327\17\11\4\0"+
    "\2\11\11\0\1\11\13\0\2\11\5\0\13\11\4\0"+
    "\5\11\1\330\23\11\4\0\2\11\11\0\1\11\13\0"+
    "\2\11\5\0\13\11\4\0\20\11\1\331\10\11\4\0"+
    "\2\11\11\0\1\11\13\0\2\11\5\0\13\11\4\0"+
    "\21\11\1\332\7\11\4\0\2\11\11\0\1\11\13\0"+
    "\2\11\5\0\13\11\4\0\21\11\1\333\1\334\6\11"+
    "\4\0\2\11\11\0\1\11\13\0\2\11\5\0\13\11"+
    "\4\0\1\11\1\335\27\11\4\0\2\11\11\0\1\11"+
    "\13\0\2\11\5\0\13\11\4\0\2\11\1\336\26\11"+
    "\4\0\2\11\11\0\1\11\13\0\2\11\5\0\13\11"+
    "\4\0\11\11\1\337\17\11\4\0\2\11\11\0\1\11"+
    "\13\0\2\11\5\0\13\11\4\0\5\11\1\340\23\11"+
    "\4\0\2\11\11\0\1\11\13\0\2\11\5\0\13\11"+
    "\4\0\5\11\1\341\23\11\4\0\2\11\11\0\1\11"+
    "\13\0\2\11\5\0\13\11\4\0\21\11\1\300\7\11"+
    "\4\0\2\11\11\0\1\11\13\0\2\11\5\0\13\11"+
    "\4\0\1\11\1\342\27\11\4\0\2\11\11\0\1\11"+
    "\13\0\2\11\5\0\13\11\4\0\5\11\1\343\23\11"+
    "\4\0\2\11\11\0\1\11\13\0\2\11\5\0\13\11"+
    "\4\0\3\11\1\344\25\11\4\0\2\11\11\0\1\11"+
    "\13\0\2\11\5\0\13\11\4\0\13\11\1\345\2\11"+
    "\1\346\12\11\4\0\2\11\11\0\1\11\13\0\2\11"+
    "\5\0\13\11\4\0\5\11\1\347\23\11\4\0\2\11"+
    "\11\0\1\11\13\0\2\11\5\0\13\11\4\0\2\11"+
    "\1\350\1\11\1\351\24\11\4\0\2\11\11\0\1\11"+
    "\13\0\2\11\5\0\13\11\4\0\7\11\1\352\21\11"+
    "\4\0\2\11\11\0\1\11\13\0\2\11\5\0\13\11"+
    "\4\0\13\11\1\314\15\11\4\0\2\11\11\0\1\11"+
    "\13\0\2\11\5\0\13\11\4\0\24\11\1\353\4\11"+
    "\4\0\2\11\11\0\1\11\13\0\2\11\5\0\13\11"+
    "\4\0\22\11\1\354\6\11\4\0\2\11\11\0\1\11"+
    "\13\0\2\11\5\0\13\11\4\0\13\11\1\355\15\11"+
    "\4\0\2\11\11\0\1\11\13\0\2\11\5\0\13\11"+
    "\4\0\16\11\1\356\12\11\4\0\2\11\11\0\1\11"+
    "\13\0\2\11\5\0\13\11\4\0\5\11\1\357\23\11"+
    "\4\0\2\11\11\0\1\11\13\0\2\11\5\0\13\11"+
    "\4\0\23\11\1\360\5\11\4\0\2\11\11\0\1\11"+
    "\13\0\2\11\5\0\13\11\4\0\5\11\1\361\23\11"+
    "\4\0\2\11\11\0\1\11\13\0\2\11\5\0\13\11"+
    "\4\0\22\11\1\362\6\11\4\0\2\11\11\0\1\11"+
    "\13\0\2\11\5\0\13\11\4\0\21\11\1\363\7\11"+
    "\4\0\2\11\11\0\1\11\13\0\2\11\5\0\13\11"+
    "\4\0\5\11\1\364\23\11\4\0\2\11\11\0\1\11"+
    "\13\0\2\11\5\0\13\11\4\0\11\11\1\365\17\11"+
    "\4\0\2\11\11\0\1\11\13\0\2\11\5\0\13\11"+
    "\4\0\4\11\1\366\24\11\4\0\2\11\11\0\1\11"+
    "\13\0\2\11\5\0\13\11\4\0\13\11\1\367\15\11"+
    "\4\0\1\11\2\304\1\216\2\304\1\216\3\304\1\216"+
    "\6\304\1\370\30\304\1\216\40\304\20\216\1\305\4\216"+
    "\1\220\64\216\21\0\1\224\1\0\1\224\2\0\2\312"+
    "\110\0\2\311\103\0\1\224\1\0\1\224\2\0\2\226"+
    "\5\0\3\226\15\0\6\226\27\0\1\11\11\0\1\11"+
    "\13\0\2\11\5\0\13\11\4\0\20\11\1\371\10\11"+
    "\4\0\2\11\11\0\1\11\13\0\2\11\5\0\13\11"+
    "\4\0\22\11\1\372\6\11\4\0\2\11\11\0\1\11"+
    "\13\0\2\11\5\0\3\11\1\373\1\374\6\11\4\0"+
    "\31\11\4\0\2\11\11\0\1\11\13\0\2\11\5\0"+
    "\13\11\4\0\15\11\1\375\13\11\4\0\2\11\11\0"+
    "\1\11\13\0\2\11\5\0\13\11\4\0\15\11\1\376"+
    "\13\11\4\0\2\11\11\0\1\11\13\0\2\11\5\0"+
    "\13\11\4\0\15\11\1\377\13\11\4\0\2\11\11\0"+
    "\1\11\13\0\2\11\5\0\13\11\4\0\15\11\1\u0100"+
    "\13\11\4\0\2\11\11\0\1\11\13\0\2\11\5\0"+
    "\13\11\4\0\12\11\1\u0101\16\11\4\0\2\11\11\0"+
    "\1\11\13\0\2\11\5\0\13\11\4\0\21\11\1\u0102"+
    "\7\11\4\0\2\11\11\0\1\11\13\0\2\11\5\0"+
    "\13\11\4\0\22\11\1\u0103\6\11\4\0\2\11\11\0"+
    "\1\11\13\0\2\11\5\0\13\11\4\0\11\11\1\u0104"+
    "\17\11\4\0\2\11\11\0\1\11\13\0\2\11\5\0"+
    "\13\11\4\0\23\11\1\u0105\5\11\4\0\2\11\11\0"+
    "\1\11\13\0\2\11\5\0\13\11\4\0\13\11\1\u0106"+
    "\15\11\4\0\2\11\11\0\1\11\13\0\2\11\5\0"+
    "\13\11\4\0\15\11\1\u0107\2\11\1\u0108\10\11\4\0"+
    "\2\11\11\0\1\11\13\0\2\11\5\0\13\11\4\0"+
    "\22\11\1\u0109\6\11\4\0\2\11\11\0\1\11\13\0"+
    "\2\11\5\0\13\11\4\0\1\11\1\u010a\27\11\4\0"+
    "\2\11\11\0\1\11\13\0\2\11\5\0\13\11\4\0"+
    "\22\11\1\u010b\6\11\4\0\2\11\11\0\1\11\13\0"+
    "\2\11\5\0\13\11\4\0\5\11\1\u010c\23\11\4\0"+
    "\2\11\11\0\1\11\13\0\2\11\5\0\13\11\4\0"+
    "\20\11\1\u010d\10\11\4\0\2\11\11\0\1\11\13\0"+
    "\2\11\5\0\13\11\4\0\20\11\1\u010e\10\11\4\0"+
    "\2\11\11\0\1\11\13\0\2\11\5\0\13\11\4\0"+
    "\1\11\1\u010f\27\11\4\0\2\11\11\0\1\11\13\0"+
    "\2\11\5\0\13\11\4\0\5\11\1\u0110\23\11\4\0"+
    "\2\11\11\0\1\11\13\0\2\11\5\0\13\11\4\0"+
    "\11\11\1\u0111\17\11\4\0\2\11\11\0\1\11\13\0"+
    "\2\11\5\0\13\11\4\0\20\11\1\u0112\10\11\4\0"+
    "\2\11\11\0\1\11\13\0\2\11\5\0\13\11\4\0"+
    "\1\11\1\u0113\27\11\4\0\2\11\11\0\1\11\13\0"+
    "\2\11\5\0\13\11\4\0\20\11\1\u0114\10\11\4\0"+
    "\2\11\11\0\1\11\13\0\2\11\5\0\13\11\4\0"+
    "\16\11\1\u0115\12\11\4\0\2\11\11\0\1\11\13\0"+
    "\2\11\5\0\13\11\4\0\3\11\1\u0116\25\11\4\0"+
    "\2\11\11\0\1\11\13\0\2\11\5\0\13\11\4\0"+
    "\13\11\1\u0117\15\11\4\0\2\11\11\0\1\11\13\0"+
    "\2\11\5\0\13\11\4\0\5\11\1\u0118\23\11\4\0"+
    "\1\11\2\304\1\216\2\304\1\216\3\304\1\216\6\304"+
    "\1\370\4\304\1\71\23\304\1\216\40\304\1\11\11\0"+
    "\1\11\13\0\2\11\5\0\13\11\4\0\20\11\1\u0119"+
    "\10\11\4\0\2\11\11\0\1\11\13\0\2\11\5\0"+
    "\13\11\4\0\15\11\1\u011a\13\11\4\0\2\11\11\0"+
    "\1\11\13\0\2\11\5\0\13\11\4\0\11\11\1\u011b"+
    "\17\11\4\0\2\11\11\0\1\11\13\0\2\11\5\0"+
    "\13\11\4\0\7\11\1\u011c\21\11\4\0\2\11\11\0"+
    "\1\11\13\0\2\11\5\0\13\11\4\0\3\11\1\u011d"+
    "\25\11\4\0\2\11\11\0\1\11\13\0\2\11\5\0"+
    "\13\11\4\0\5\11\1\u011e\23\11\4\0\2\11\11\0"+
    "\1\11\13\0\2\11\5\0\13\11\4\0\15\11\1\u011f"+
    "\13\11\4\0\2\11\11\0\1\11\13\0\2\11\5\0"+
    "\13\11\4\0\13\11\1\u0120\15\11\4\0\2\11\11\0"+
    "\1\11\13\0\2\11\5\0\13\11\4\0\5\11\1\u0121"+
    "\23\11\4\0\2\11\11\0\1\11\13\0\2\11\5\0"+
    "\13\11\4\0\4\11\1\u0122\24\11\4\0\2\11\11\0"+
    "\1\11\13\0\2\11\5\0\13\11\4\0\15\11\1\u0123"+
    "\13\11\4\0\2\11\11\0\1\11\13\0\2\11\5\0"+
    "\13\11\4\0\3\11\1\u0124\25\11\4\0\2\11\11\0"+
    "\1\11\13\0\2\11\5\0\13\11\4\0\11\11\1\u0125"+
    "\17\11\4\0\2\11\11\0\1\11\13\0\2\11\5\0"+
    "\13\11\4\0\14\11\1\u0126\14\11\4\0\2\11\11\0"+
    "\1\11\13\0\2\11\5\0\13\11\4\0\22\11\1\u0127"+
    "\6\11\4\0\2\11\11\0\1\11\13\0\2\11\5\0"+
    "\13\11\4\0\6\11\1\u0128\22\11\4\0\2\11\11\0"+
    "\1\11\13\0\2\11\5\0\13\11\4\0\22\11\1\u0129"+
    "\6\11\4\0\2\11\11\0\1\11\13\0\2\11\5\0"+
    "\13\11\4\0\3\11\1\u012a\25\11\4\0\2\11\11\0"+
    "\1\11\13\0\2\11\5\0\13\11\4\0\3\11\1\u012b"+
    "\25\11\4\0\2\11\11\0\1\11\13\0\2\11\5\0"+
    "\13\11\4\0\4\11\1\u012c\24\11\4\0\2\11\11\0"+
    "\1\11\13\0\2\11\5\0\13\11\4\0\22\11\1\u012d"+
    "\6\11\4\0\2\11\11\0\1\11\13\0\2\11\5\0"+
    "\13\11\4\0\15\11\1\u012e\13\11\4\0\2\11\11\0"+
    "\1\11\13\0\2\11\5\0\13\11\4\0\6\11\1\u012f"+
    "\22\11\4\0\2\11\11\0\1\11\13\0\2\11\5\0"+
    "\13\11\4\0\10\11\1\u0130\20\11\4\0\2\11\11\0"+
    "\1\11\13\0\2\11\5\0\13\11\4\0\1\11\1\u0131"+
    "\27\11\4\0\2\11\11\0\1\11\13\0\2\11\5\0"+
    "\13\11\4\0\22\11\1\u0132\6\11\4\0\2\11\11\0"+
    "\1\11\13\0\2\11\5\0\13\11\4\0\15\11\1\u0133"+
    "\13\11\4\0\2\11\11\0\1\11\13\0\2\11\5\0"+
    "\13\11\4\0\1\u0134\30\11\4\0\2\11\11\0\1\11"+
    "\13\0\2\11\5\0\13\11\4\0\1\u0135\30\11\4\0"+
    "\2\11\11\0\1\11\13\0\2\11\5\0\13\11\4\0"+
    "\23\11\1\u0136\5\11\4\0\2\11\11\0\1\11\13\0"+
    "\2\11\5\0\13\11\4\0\22\11\1\u0137\6\11\4\0"+
    "\2\11\11\0\1\11\13\0\2\11\5\0\13\11\4\0"+
    "\21\11\1\u0138\7\11\4\0\2\11\11\0\1\11\13\0"+
    "\2\11\5\0\13\11\4\0\10\11\1\u0139\20\11\4\0"+
    "\2\11\11\0\1\11\13\0\2\11\5\0\13\11\4\0"+
    "\16\11\1\u013a\12\11\4\0\2\11\11\0\1\11\13\0"+
    "\2\11\5\0\13\11\4\0\5\11\1\u013b\23\11\4\0"+
    "\2\11\6\0\1\u013c\2\0\1\11\13\0\2\11\5\0"+
    "\13\11\4\0\31\11\4\0\2\11\11\0\1\11\13\0"+
    "\2\11\5\0\13\11\4\0\1\11\1\u013d\27\11\4\0"+
    "\2\11\11\0\1\11\13\0\2\11\5\0\13\11\4\0"+
    "\5\11\1\u013e\23\11\4\0\2\11\11\0\1\11\13\0"+
    "\2\11\5\0\13\11\4\0\22\11\1\u013f\6\11\4\0"+
    "\2\11\11\0\1\11\13\0\2\11\5\0\13\11\4\0"+
    "\27\11\1\u0140\1\11\4\0\2\11\11\0\1\11\13\0"+
    "\2\11\5\0\13\11\4\0\5\11\1\u0141\23\11\4\0"+
    "\2\11\11\0\1\11\13\0\2\11\5\0\13\11\4\0"+
    "\5\11\1\u0142\23\11\4\0\2\11\11\0\1\11\13\0"+
    "\2\11\5\0\13\11\4\0\1\u0143\30\11\4\0\2\11"+
    "\11\0\1\11\13\0\2\11\5\0\13\11\4\0\1\u0144"+
    "\30\11\4\0\2\11\11\0\1\11\13\0\2\11\5\0"+
    "\13\11\4\0\5\11\1\u0145\23\11\4\0\2\11\11\0"+
    "\1\11\13\0\2\11\5\0\13\11\4\0\15\11\1\u0146"+
    "\13\11\4\0\2\11\11\0\1\11\13\0\2\11\5\0"+
    "\13\11\4\0\15\11\1\u0147\13\11\4\0\2\11\11\0"+
    "\1\11\13\0\2\11\5\0\13\11\4\0\3\11\1\u0148"+
    "\25\11\4\0\2\11\11\0\1\11\13\0\2\11\5\0"+
    "\13\11\4\0\5\11\1\u0149\23\11\4\0\2\11\11\0"+
    "\1\11\13\0\2\11\5\0\13\11\4\0\7\11\1\u014a"+
    "\21\11\4\0\2\11\11\0\1\11\13\0\2\11\5\0"+
    "\13\11\4\0\22\11\1\u014b\6\11\4\0\2\11\11\0"+
    "\1\11\13\0\2\11\5\0\13\11\4\0\5\11\1\u014c"+
    "\23\11\4\0\2\11\11\0\1\11\13\0\2\11\5\0"+
    "\13\11\4\0\4\11\1\u014d\24\11\4\0\2\11\11\0"+
    "\1\11\13\0\2\11\5\0\13\11\4\0\5\11\1\u014e"+
    "\23\11\4\0\2\11\11\0\1\11\13\0\2\11\5\0"+
    "\13\11\4\0\21\11\1\u014f\7\11\4\0\2\11\11\0"+
    "\1\11\13\0\2\11\5\0\13\11\4\0\20\11\1\u0150"+
    "\10\11\4\0\1\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17760];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\0\2\11\2\1\1\11\1\1\1\11"+
    "\1\1\3\11\2\1\1\11\1\1\1\11\3\1\2\11"+
    "\10\1\2\11\22\1\1\11\1\1\2\11\1\1\1\11"+
    "\10\1\7\11\1\0\1\1\1\11\1\0\1\1\2\0"+
    "\3\11\5\1\1\11\46\1\1\11\2\1\12\11\3\0"+
    "\1\11\2\1\2\0\60\1\1\0\1\1\2\0\163\1"+
    "\1\11\24\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

    private Symbol symbol(int type) {
    System.out.println(yytext());
		return new Symbol(type);
    }
    private Symbol symbol(int type, String value) {
      System.out.println(yytext());
    	return new Symbol(type, value);
    }
    private Symbol symbol(int type, Object value) {
      System.out.println(yytext());
    	return new Symbol(type, value);
    }


String strr = "";
String charr = "";
// public String text = new String();
  



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { strr = strr +  yytext();
            }
            // fall through
          case 113: break;
          case 2:
            { throw new Error("Illegal character <"+yytext()+">");
            }
            // fall through
          case 114: break;
          case 3:
            { /* Ignore*/
            }
            // fall through
          case 115: break;
          case 4:
            { return symbol (sym.LOGICSIGHN);
            }
            // fall through
          case 116: break;
          case 5:
            { yybegin(STRING); strr = "" + yytext();
            }
            // fall through
          case 117: break;
          case 6:
            { return symbol(sym.ID, new String(yytext()));
            }
            // fall through
          case 118: break;
          case 7:
            { return symbol(sym.MOD);
            }
            // fall through
          case 119: break;
          case 8:
            { return symbol(sym.ARITHAND);
            }
            // fall through
          case 120: break;
          case 9:
            { yybegin(CHAR); charr = "" + yytext();
            }
            // fall through
          case 121: break;
          case 10:
            { return symbol (sym.LEFTPAREN);
            }
            // fall through
          case 122: break;
          case 11:
            { return symbol (sym.RIGHTPAREN);
            }
            // fall through
          case 123: break;
          case 12:
            { return symbol(sym.MULT);
            }
            // fall through
          case 124: break;
          case 13:
            { return symbol(sym.PLUS);
            }
            // fall through
          case 125: break;
          case 14:
            { return symbol(sym.COMMA);
            }
            // fall through
          case 126: break;
          case 15:
            { return symbol(sym.MINUS);
            }
            // fall through
          case 127: break;
          case 16:
            { return symbol (sym.DOT);
            }
            // fall through
          case 128: break;
          case 17:
            { return symbol(sym.DIV);
            }
            // fall through
          case 129: break;
          case 18:
            { return symbol(sym.INTCONST, yytext());
            }
            // fall through
          case 130: break;
          case 19:
            { return symbol(sym.COLON);
            }
            // fall through
          case 131: break;
          case 20:
            { return symbol(sym.SEMICOLON);
            }
            // fall through
          case 132: break;
          case 21:
            { return symbol(sym.LT);
            }
            // fall through
          case 133: break;
          case 22:
            { return symbol(sym.ASSIGN);
            }
            // fall through
          case 134: break;
          case 23:
            { return symbol(sym.GT);
            }
            // fall through
          case 135: break;
          case 24:
            { return symbol (sym.LEFTBRACK);
            }
            // fall through
          case 136: break;
          case 25:
            { return symbol (sym.RIGHTBRACK);
            }
            // fall through
          case 137: break;
          case 26:
            { return symbol(sym.XOR);
            }
            // fall through
          case 138: break;
          case 27:
            { return symbol (sym.LEFTAKULAD);
            }
            // fall through
          case 139: break;
          case 28:
            { return symbol(sym.ARITHOR);
            }
            // fall through
          case 140: break;
          case 29:
            { return symbol (sym.RIGHTAKULAD);
            }
            // fall through
          case 141: break;
          case 30:
            { return symbol(sym.BITNEG);
            }
            // fall through
          case 142: break;
          case 31:
            { yybegin(YYINITIAL);
		return symbol(sym.STRINGCONST, strr + yytext());
            }
            // fall through
          case 143: break;
          case 32:
            { strr = strr + ("\\");
            }
            // fall through
          case 144: break;
          case 33:
            { charr = charr +yytext();
	    yybegin(YYINITIAL);
	    return symbol(sym.CHARCONST, charr + yytext());
            }
            // fall through
          case 145: break;
          case 34:
            { return symbol(sym.NOTEQ);
            }
            // fall through
          case 146: break;
          case 35:
            { return symbol (sym.ANDAND);
            }
            // fall through
          case 147: break;
          case 36:
            { return symbol(sym.MULTASS);
            }
            // fall through
          case 148: break;
          case 37:
            { return symbol(sym.INC);
            }
            // fall through
          case 149: break;
          case 38:
            { return symbol(sym.ADDASS);
            }
            // fall through
          case 150: break;
          case 39:
            { return symbol(sym.DEC);
            }
            // fall through
          case 151: break;
          case 40:
            { return symbol(sym.SUBASS);
            }
            // fall through
          case 152: break;
          case 41:
            { /*Ingnore*/
            }
            // fall through
          case 153: break;
          case 42:
            { return symbol(sym.DIVASS);
            }
            // fall through
          case 154: break;
          case 43:
            { return symbol(sym.FLOATCONST, yytext());
            }
            // fall through
          case 155: break;
          case 44:
            { return symbol (sym.LTEQ);
            }
            // fall through
          case 156: break;
          case 45:
            { return symbol(sym.EQEQ);
            }
            // fall through
          case 157: break;
          case 46:
            { return symbol(sym.GTEQ);
            }
            // fall through
          case 158: break;
          case 47:
            { return symbol (sym.BRACKETS);
            }
            // fall through
          case 159: break;
          case 48:
            { return symbol (sym.IF);
            }
            // fall through
          case 160: break;
          case 49:
            { return symbol(sym.OF);
            }
            // fall through
          case 161: break;
          case 50:
            { return symbol (sym.OROR);
            }
            // fall through
          case 162: break;
          case 51:
            { strr = strr + ("\\\"");
            }
            // fall through
          case 163: break;
          case 52:
            { strr = strr+("\\\'");
            }
            // fall through
          case 164: break;
          case 53:
            { strr = strr + ("\\0");
            }
            // fall through
          case 165: break;
          case 54:
            { strr = strr + ("\\b");
            }
            // fall through
          case 166: break;
          case 55:
            { strr = strr + ("\\f");
            }
            // fall through
          case 167: break;
          case 56:
            { strr = strr+("\\n");
            }
            // fall through
          case 168: break;
          case 57:
            { strr = strr + ("\\r");
            }
            // fall through
          case 169: break;
          case 58:
            { strr = strr+("\\t");
            }
            // fall through
          case 170: break;
          case 59:
            { strr = strr + ("\\v");
            }
            // fall through
          case 171: break;
          case 60:
            { return symbol(sym.FLOATCONST, new Double(yytext()));
            }
            // fall through
          case 172: break;
          case 61:
            { return symbol (sym.INTCONST, yytext());
            }
            // fall through
          case 173: break;
          case 62:
            { return symbol(sym.END);
            }
            // fall through
          case 174: break;
          case 63:
            { return symbol(sym.FOR);
            }
            // fall through
          case 175: break;
          case 64:
            { return symbol(sym.INT);
            }
            // fall through
          case 176: break;
          case 65:
            { return symbol(sym.NEW);
            }
            // fall through
          case 177: break;
          case 66:
            { return symbol(sym.DOUBLECONST, yytext());
            }
            // fall through
          case 178: break;
          case 67:
            { return symbol(sym.NULL);
            }
            // fall through
          case 179: break;
          case 68:
            { return symbol(sym.AUTO);
            }
            // fall through
          case 180: break;
          case 69:
            { return symbol(sym.BOOL);
            }
            // fall through
          case 181: break;
          case 70:
            { return symbol(sym.BTOI);
            }
            // fall through
          case 182: break;
          case 71:
            { return symbol(sym.CASE);
            }
            // fall through
          case 183: break;
          case 72:
            { return symbol(sym.CHAR);
            }
            // fall through
          case 184: break;
          case 73:
            { return symbol(sym.DTOI);
            }
            // fall through
          case 185: break;
          case 74:
            { return symbol(sym.ELSE) ;
            }
            // fall through
          case 186: break;
          case 75:
            { return symbol(sym.ITOB);
            }
            // fall through
          case 187: break;
          case 76:
            { return symbol(sym.ITOD);
            }
            // fall through
          case 188: break;
          case 77:
            { return symbol(sym.LONG);
            }
            // fall through
          case 189: break;
          case 78:
            { return symbol(sym.THIS);
            }
            // fall through
          case 190: break;
          case 79:
            { return symbol(sym.BOOLEANCONST, yytext());
            }
            // fall through
          case 191: break;
          case 80:
            { return symbol (sym.VOID);
            }
            // fall through
          case 192: break;
          case 81:
            { return symbol(sym.PRINT);
            }
            // fall through
          case 193: break;
          case 82:
            { return symbol(sym.BEGIN);
            }
            // fall through
          case 194: break;
          case 83:
            { return symbol(sym.BREAK);
            }
            // fall through
          case 195: break;
          case 84:
            { return symbol(sym.CLASS);
            }
            // fall through
          case 196: break;
          case 85:
            { return symbol(sym.CONST);
            }
            // fall through
          case 197: break;
          case 86:
            { return symbol(sym.FLOAT);
            }
            // fall through
          case 198: break;
          case 87:
            { return  symbol(sym.UNTIL);
            }
            // fall through
          case 199: break;
          case 88:
            { return symbol(sym.WHILE);
            }
            // fall through
          case 200: break;
          case 89:
            { return  symbol(sym.STRING);
            }
            // fall through
          case 201: break;
          case 90:
            { return symbol(sym.DOUBLE);
            }
            // fall through
          case 202: break;
          case 91:
            { return symbol(sym.EXTERN);
            }
            // fall through
          case 203: break;
          case 92:
            { return symbol(sym.PUBLIC);
            }
            // fall through
          case 204: break;
          case 93:
            { return symbol(sym.RECORD);
            }
            // fall through
          case 205: break;
          case 94:
            { return symbol(sym.REPEAT);
            }
            // fall through
          case 206: break;
          case 95:
            { return symbol(sym.RETURN);
            }
            // fall through
          case 207: break;
          case 96:
            { return symbol(sym.SIZEOF);
            }
            // fall through
          case 208: break;
          case 97:
            { return symbol(sym.SWITCH);
            }
            // fall through
          case 209: break;
          case 98:
            { return symbol(sym.DEFAULT);
            }
            // fall through
          case 210: break;
          case 99:
            { return symbol (sym.EXTENDS);
            }
            // fall through
          case 211: break;
          case 100:
            { return symbol(sym.FOREACH);
            }
            // fall through
          case 212: break;
          case 101:
            { return symbol(sym.IMPORT);
            }
            // fall through
          case 213: break;
          case 102:
            { return symbol (sym.PRIVATE);
            }
            // fall through
          case 214: break;
          case 103:
            { return symbol(sym.NEWARRAY);
            }
            // fall through
          case 215: break;
          case 104:
            { return symbol(sym.READLINE);
            }
            // fall through
          case 216: break;
          case 105:
            { return symbol(sym.__FUNC__);
            }
            // fall through
          case 217: break;
          case 106:
            { return symbol(sym.__LINE__);
            }
            // fall through
          case 218: break;
          case 107:
            { return symbol(sym.CONTINUE);
            }
            // fall through
          case 219: break;
          case 108:
            { return symbol(sym.FUNCTION);
            }
            // fall through
          case 220: break;
          case 109:
            { return symbol(sym.INTERFACE);
            }
            // fall through
          case 221: break;
          case 110:
            { return symbol(sym.PROTECTED);
            }
            // fall through
          case 222: break;
          case 111:
            { return symbol(sym.IMPLEMENTS);
            }
            // fall through
          case 223: break;
          case 112:
            { return symbol(sym.READINTEGER);
            }
            // fall through
          case 224: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
