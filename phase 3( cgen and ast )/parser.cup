
import java_cup.runtime.*;


parser code  {:
  private Lexer lexer;
  public parser(Lexer lexer){
    this.lexer = lexer;

  }
:};

scan with {: return lexer.next_token(); :};

 /********* TERMINALs ***********/

/*keywords*/
terminal THIS;    /* this */
terminal EXTENDS;   /* extends */
terminal IMPLEMENTS;    /* implement */
terminal FOR;   /* for */
terminal CONTINUE;   /* continue */
terminal NEW;   /* new */
terminal FLOAT;   /* float */
terminal CONST;   /* const */
terminal NEWARRAY;  /* newarray */
terminal REPEAT;    /* repeat */
terminal FOREACH;   /* foreach*/
terminal PRINT;     /* print */
terminal READINTEGER;   /* readinteger*/
terminal READLINE; /* readline */
terminal VOID;    /* void */
terminal ID;      /* ID */
terminal CLASS;   /* class */
terminal INTERFACE;   /* interface */
terminal NULL;    /* null */
terminal LONG;    /* long */
terminal INC ;    /* ++ */
terminal DEC;     /* -- */
terminal DTOI;    /* dtol */
terminal ITOD;    /* itod */
terminal BTOI;    /* btoi */
terminal ITOB;    /* itob */
terminal PRIVATE; /* private */
terminal PROTECTED;/* protected */
terminal WHILE;   /* while */
terminal IF;    /* if */

terminal ELSE;   /* else */
terminal RETURN;  /* return */
terminal BREAK;   /* break */
terminal PUBLIC;  /* public */
terminal INT;   /* int */
terminal DOUBLE;    /* double */
terminal STRING;    /* string */
terminal UNTIL;     /* until */
terminal IMPORT;    /* import */
terminal __LINE__;  /* __line */
terminal FUNCTION;  /* function */
terminal __FUNC__;  /* __func__ */
terminal BEGIN;     /* begin */
terminal RECORD;    /* record */
terminal END;       /* end */
terminal OF;        /* of */
terminal EXTERND;   /* externd */
terminal CHAR;      /* char */
terminal SIZEOF;    /* sizeof */
terminal DEFAULT;   /* default */
terminal CASE;    /* case */
terminal SWITCH;  /* switch */
terminal AUTO;    /* auto */
terminal IN;
terminal BOOL;
terminal BRACKETS;     // brakets should be a terminal becuase leftvalue has r/r confilict with possible types
/*operation terminals*/

terminal PLUS;    /* + */
terminal MINUS;  /* - */
terminal MULT;  /* * */
terminal DIV;   /* / */
terminal MOD;   /* % */
terminal ASSIGN;    /* = */
terminal EQEQ;    /* == */
terminal NOTEQ;   /* != */
terminal LT;    /* < */
terminal LTEQ;    /* <= */
terminal GT;    /* > */
terminal GTEQ; /* >= */
terminal ANDAND; /* && */
terminal OROR;   /* || */
terminal LOGICSIGHN;   /* ! */
terminal SEMICOLON;   /* ; */
terminal COMMA;   /* , */
terminal DOT;    /* . */
terminal LEFTBRACK;    /* [ */
terminal RIGHTBRACK;    /* ] */
terminal LEFTPAREN;   /* ( */
terminal RIGHTPAREN;   /* ) */
terminal LEFTAKULAD;    /* { */
terminal RIGHTAKULAD;   /* } */
terminal ADDASS;   /* += */
terminal SUBASS;   /* -= */
terminal MULTASS;    /* *= */
terminal DIVASS;    /* /= */
terminal NOT; /* not */
terminal BITNEG;/* ~ */
terminal ARITHAND;   /* & */
terminal LOGICAND;   /* and */
terminal ARITHOR;    /* | */
terminal LOGICOR;    /* or */
terminal XOR; /* ^ */
terminal COLON; /* : */
terminal EXTERN;

// terminals for boolean , double , float , int , char , string;
terminal  String BOOLEANCONST;
terminal  String INTCONST;
terminal  String DOUBLECONST;
terminal  String STRINGCONST; // stringConstant     // our scanner provides Strings as identifier
terminal  String FLOATCONST;
terminal  String CHARCONST;
terminal  String LONGCONST;
/********** NON TERMINALs **********/

non terminal    stmt;
non terminal    expr;
// Loops
non terminal    for_state;
non terminal    while_state;  // while statement

// if , if and else 
non terminal    if_one_action_state;    // with no 'else'
non terminal    if_multi_actoin_state; // with no 'else'
non terminal    if_one_action_with_else_state;
non terminal    if_multi_actoin_with_else_state;

non terminal    break_state;  // break statement
non terminal    continue_state;  // continue statement
non terminal    return_state;  // return statement  

non terminal    type_state;  // type statement

non terminal    Call_state; //  call statement
non terminal    cond_stmt ;
non terminal    loop_stmt ;
non terminal    constant_state; //constant statement

// OPERATIONS
//farzan
non terminal    expr_with_operation;
non terminal    more_expr;
non terminal    expr_plus;
// Declarations (xxxx_dcl)
non terminal     declarations;
non terminal     brakets;
// Varaible: INT, DOUBLE, STRING, BOOLEAN, IDENTIFIER(id) 
non terminal  variable_dcl;
non terminal  func_dcl;
non terminal  class_dcl;
non terminal  extend_dcl;
non terminal  implement_dcl;
non terminal  interface_dcl;
non terminal  possible_type;
non terminal  optional_extend;
non terminal  block;
non terminal  block_par;
non terminal  Program;
non terminal  Structure;
non terminal  Leftvalue;
non terminal  constant_val;
non terminal  method_call;
non terminal  Prototype;
non terminal  Formals;
non terminal  FormalsMore;
non terminal  type_args;
non terminal  statements;
non terminal  parameters;
non terminal  assignment;
non terminal  modes;
non terminal  while_if_multi_actoin_state;
non terminal  BreakStmt;
non terminal  PrintStmt;
non terminal  ReturnStmt;
non terminal  func_extern;
non terminal  extern_dcl;
non terminal  Pars;
non terminal  Fields;
non terminal  Field;
non terminal  StmtBlock;
non terminal variable_dcl_plus;
non terminal var_dcl_end;
non terminal var_dcl_cnt;
non terminal If_then_statement;
non terminal Statement_no_short_if ;
non terminal If_then_else_statement;
non terminal While_statement_no_short_if ;
non terminal ForStmt;
non terminal WhileStmt;
non terminal If_then_statement_multi_task ;
/********** PRECEDENCES **********/

precedence left COMMA;
precedence right ASSIGN, ADDASS, SUBASS, MULTASS, DIVASS;
precedence left LOGICOR;
precedence left LOGICAND;
precedence left ARITHOR;
precedence left XOR;
precedence left ARITHAND;
precedence left EQEQ, NOTEQ;
precedence left LT, LTEQ, GT, GTEQ;
precedence left PLUS, MINUS;
precedence left MULT, DIV, MOD;
precedence right NOT, BITNEG, SIZEOF;
precedence nonassoc LEFTPAREN, RIGHTPAREN;

/******* THE GRAMMER RULEs *******/

// Start with program
Program ::= Structure:s {: RESULT = s:};
Structure ::= declarations:d Structure:s
              {:
                RESULT = s;
                RESULT.addChild(t);
              :}
            | declarations:d
              {:
                RESULT = new Structure();
                result.addChild(d);
                setRoot((Structure)RESULT);
              :};

identifier ::= Identifier  ::= ID:i {:  RESULT = new objectNode(i); :};
/* experations( except increase(inc) and decrease(dec)) */
expr        ::= expr_with_operation 
              | LEFTPAREN expr RIGHTPAREN
              | Leftvalue
              | ITOD LEFTPAREN expr RIGHTPAREN 
              | DTOI LEFTPAREN expr RIGHTPAREN 
              | ITOB LEFTPAREN expr RIGHTPAREN 
              | BTOI LEFTPAREN expr RIGHTPAREN
              | constant_val
              | method_call
              | BITNEG expr
              | SIZEOF LEFTPAREN possible_type RIGHTPAREN
              | MINUS expr 
              | PLUS expr 
              | Call_state
              | THIS
              | NOT expr  
              | READINTEGER LEFTPAREN RIGHTPAREN 
              | READLINE LEFTPAREN RIGHTPAREN 
              | NEW ID 
              | NEWARRAY LEFTPAREN expr COMMA possible_type RIGHTPAREN;

Call_state   ::= ID LEFTPAREN expr RIGHTPAREN
               | expr DOT ID LEFTPAREN expr RIGHTPAREN
               | expr DOT ID LEFTPAREN  RIGHTPAREN;



/******* Constant Values *******/
constant_val     ::=INTCONST:i
                        {: RESULT = new IntegerConst(i); :}
                    | NULL
    	                  {: RESULT = new BaseNode(Nodes_Type.NULL_LITERAL); :}
                    | CHARCONST:c
                        {: RESULT = new CharConst(c); :}
                    | FALSE 
                        {: RESULT = new BooleanConst(false); :}
                    | TRUE
                        {: RESULT = new BooleanConst(true); :}
                    | STRINGCONST:s
	                      {: RESULT = new StringConst(s); :}
                    | REALCONST:r
                        {: RESULT = new FloatConst(r); :}
                    | LONGCONST:l
	                      {: RESULT = new LongConst(l); :};


/********* Operations *********/
expr_with_operation     ::= expr PLUS  expr
                          | expr MINUS expr
                          | expr MULT expr
                          | expr DIV expr
                          | expr MOD expr
                          | expr EQEQ expr
                          | expr LOGICOR expr
                          | expr LOGICAND expr
                          | expr XOR expr
                          | expr GT expr
                          | expr GTEQ expr
                          | expr LT expr
                          | expr LTEQ expr
                          | expr ASSIGN expr
                          | expr NOTEQ expr
                          | expr NOT expr
                          |expr ARITHAND expr
                          |expr ARITHOR expr;



/********** Declaration **********/
declarations    ::= variable_dcl:vd
                    {:
                      RESULT = vd 
                    :}
                  | func_dcl = fd
                    {:
                      RESULT = fd
                    :}
                  | class_dcl : cd 
                    {:
                      RESULT = cd
                    :}
                  | extend_dcl : ed 
                    {:
                      RESULT = ed
                    :}
                  | implement_dcl:implementdc
                    {:
                      RESULT = implementdc
                    :}
                  | interface_dcl:interdaced
                    {:
                      RESULT = interdaced
                    :};


interface_dcl ::= INTERFACE ID LEFTAKULAD Prototype RIGHTAKULAD;
Prototype ::= possible_type ID LEFTPAREN Formals RIGHTBRACK SEMICOLON Prototype| ;
Formals ::= possible_type ID FormalsMore | ;
FormalsMore ::= COMMA possible_type ID FormalsMore | ;


/****** Variable decleration ******/
variable_dcl   ::= possible_type :t var_dcl_cnt:vdc var_dcl_end:vde SEMICOLON
                  {:
			                RESULT =  new BaseASTNode(NodeType.VARIABLE_DECLARATION);
			                RESULT.addChild(t, vdc, vde);
			                t.setParent(RESULT);
			                vdc.setParent(RESULT);
			                vde.setParent(RESULT);
                  :}
	                | possible_type var_dcl_cnt SEMICOLON
                  {:
                      RESULT =  new BaseASTNode(NodeType.VARIABLE_DECLARATION);
			                RESULT.addChild(t, vdc);
		                	t.setParent(RESULT);
			                vdc.setParent(RESULT);
                  :}
                  |CONST type:t var_dcl_cnt:vdc SEMICOLON
                  |CONST type:t var_dcl_cnt:vdc var_dcl_end:vde SEMICOLON; /*I have no idea for CONST variable_decl.-> farzan*/

var_dcl_end ::=
    var_dcl_end:vde COMMA var_dcl_cnt:vdc
        {:
			RESULT = vde;
			RESULT.addChild(vdc);
			vdc.setParent(RESULT);
        :}
    | COMMA var_dcl_cnt:vdc
        {: RESULT = vdc; :};

var_dcl_cnt ::=
    identifier:i
        {:
            RESULT = i;
        :}
    | identifier:i ASSIGN expr:e
        {:
            RESULT = new BaseASTNode(NodeType.ASSIGN);
            ASTNode expr = new ExpressionNode();
            ASTNode v = new BaseASTNode(NodeType.VAR_USE);
            expr.addChild(v);
            v.setParent(expr);
            v.addChild(i);
            i.setParent(v);
            RESULT.addChild(expr,e);
            e.setParent(RESULT);
            expr.setParent(RESULT);
        :}
    | identifier:id LBRACK INTCONST:num RBRACK
        {:
            RESULT = new BaseASTNode(NodeType.ARRAY_DECLARATION);
            Literal l=new IntegerLiteralNode(num);
            RESULT.addChild(id,l);
            id.setParent(RESULT);
        :};


/******* possible Types ********/
possible_type   ::= INT
                    {: RESULT = new TypeNode(Nodes_Type.INT_TYPE, PrimitiveType.INT); :}
                  | BOOL
                    {: RESULT = new TypeNode(Nodes_Type.BOOLEAN_TYPE, PrimitiveType.BOOL); :}
                  | FLOAT
                    {: RESULT = new TypeNode(Nodes_Type.FLOAT_TYPE, PrimitiveType.FLOAT); :}
                  | LONG
                    {: RESULT = new TypeNode(Nodes_Type.LONG_TYPE, PrimitiveType.LONG); :}
                  | CHAR
                    {: RESULT = new TypeNode(Nodes_Type.CHAR_TYPE, PrimitiveType.CHAR); :}
                  | DOUBLE
                    {: RESULT = new TypeNode(Nodes_Type.DOUBLE_TYPE, PrimitiveType.DOUBLE); :}
                  | STRING
                    {: RESULT = new TypeNode(Nodes_Type.STRING_TYPE, PrimitiveType.STRING); :}
                  | VOID
                    {: RESULT = new TypeNode(Nodes_Type.VOID, PrimitiveType.VOID); :}
                  | identifier:t
	                  {: RESULT = t; :}
                  | Type:t LEFTBRACK RIGHTBRACK
                  {: RESULT = new ArrayType( (Type) t, 1 ) :};

/***** functions decleration *****/
func_extern     ::= func_dcl
                  | extern_dcl;
//start with the most complete decleration.
func_dcl        ::= Function_possible_type:t identifier:i LPAREN arguments:a RPAREN block:b
                    {:
			                  RESULT = new BaseNode(Nodes_Type.METHOD_DECLARATION);
			                  RESULT.addChild(t, i, a, b);
			                  t.setParent(RESULT);
			                  i.setParent(RESULT);
			                  a.setParent(RESULT);
			                  b.setParent(RESULT);
                    :}

                  | Function_possible_type identifier:i LPAREN arguments:a RPAREN block:b
                    {:
			                  RESULT = new BaseASTNode(NodeType.METHOD_DECLARATION);
		                  	RESULT.addChild(t, i, a, b);
			                  t.setParent(RESULT);
			                  i.setParent(RESULT);
			                  a.setParent(RESULT);
			                  b.setParent(RESULT);
                    :}
                  | Function_possible_type:t identifier:i LPAREN RPAREN block:b
                    {:
			                  RESULT = new BaseASTNode(NodeType.METHOD_DECLARATION);
			                  ASTNode a = new BaseASTNode(NodeType.ARGUMENTS);
			                  RESULT.addChild(t, i, a, b);
			                  t.setParent(RESULT);
                        i.setParent(RESULT);
                        a.setParent(RESULT);
                        b.setParent(RESULT);
                    :};

Function_possible_type ::=  modes
                           |possible_type
                           | {: RESULT = new EmptyNode(); :}; /*epsilon*/


extern_dcl ::= EXTERN type:t identifier:i
               {:
			            RESULT = new BaseASTNode(NodeType.VARIABLE_DECLARATION);
			            RESULT.addChild(t, i);
			            t.setParent(RESULT);
			            i.setParent(RESULT);
               :};


type_args       ::= possible_type ID
                  | possible_type ID brakets
                  | type_args COMMA possible_type ID
                  | type_args COMMA possible_type ID brakets;

brakets         ::= BRACKETS | brakets BRACKETS;

/****** Block ******/
block           ::= LEFTAKULAD variable_dcl:vcl RIGHTAKULAD
                  {:
                        RESULT = new SimpleNode(NodeType.BLOCK);
                        RESULT.addChild(v, vcl);
                        v.setParent(RESULT);
                        s.setParent(RESULT);
                  :}
                  | LEFTAKULAD statements:stmts RIGHTAKULAD 
                  {:
                        RESULT = new SimpleNode(NodeType.BLOCK);
                        RESULT.addChild(v, stmts);
                        v.setParent(RESULT);
                        s.setParent(RESULT);
                  :}

                  | LEFTAKULAD RIGHTAKULAD;


statements      ::= Leftvalue ASSIGN expr SEMICOLON
                  | method_call SEMICOLON
                  | cond_stmt
                  | loop_stmt
                  | RETURN SEMICOLON
                  | RETURN expr SEMICOLON
                  | BREAK SEMICOLON
                  | PRINT LEFTPAREN expr RIGHTPAREN SEMICOLON
                  | PRINT LEFTPAREN  RIGHTPAREN SEMICOLON
                  | Leftvalue SEMICOLON
                  | Leftvalue ADDASS expr SEMICOLON
                  | Leftvalue MULTASS expr SEMICOLON
                  | Leftvalue SUBASS expr  SEMICOLON
                  | Leftvalue DIVASS expr  SEMICOLON
                  | CONTINUE SEMICOLON;

assignment     ::= Leftvalue ASSIGN expr
                  | Leftvalue ADDASS expr 
                  | Leftvalue MULTASS expr 
                  | Leftvalue SUBASS expr  
                  | Leftvalue DIVASS expr;  

Leftvalue       ::= ID
                  | expr DOT ID 
                  | expr  LEFTBRACK expr RIGHTBRACK;

method_call        ::= ID LEFTPAREN RIGHTPAREN
                     | ID LEFTPAREN parameters RIGHTPAREN;


parameters        ::= expr
                    | parameters COMMA expr
                    | expr_plus;



/****** Class Decleration ******/
// i have no idea for class decleration.(class grammer's refrence:zivdar001matin )
class_dcl    ::=  CLASS identifier:i Pars LEFTAKULAD Fields RIGHTAKULAD ;
Pars         ::= extend_dcl | ;
Fields        ::= Fields:f Field  | ;
Field        ::= variable_dcl:vdl
               {: RESULT:vdl  :} 
               | func_dcl :fdl
               {: RESULT:fdl  :};
StmtBlock    ::= LEFTAKULAD variable_dcl statements RIGHTAKULAD ;
variable_dcl_plus     ::= variable_dcl_plus variable_dcl | ;
optional_extend   ::= extend_dcl|  ; // it can be null


/******* Extends Decleration ******/
extend_dcl      ::= EXTENDS ID;
modes           ::=  PRIVATE 
                   | PROTECTED
                   | PUBLIC
                   | VOID ;


/****** Loop Statement ******/
loop_stmt ::= WhileStmt
            | ForStmt;
/*** While ***/
WhileStmt    ::= WHILE LEFTPAREN Expr:e RIGHTPAREN Stmt:s
                    {:
                        RESULT = new SimpleNode(NodeType.WHILE_STATEMENT);
                        RESULT.addChild(e, s);
                        e.setParent(RESULT);
                        s.setParent(RESULT);
                    :};
/*** For ***/
ForStmt      ::= FOR LEFTPAREN expr SEMICOLON expr:exr SEMICOLON expr:exr2 RIGHTPAREN statements:stmts
               | FOR LEFTPAREN  SEMICOLON expr:exr SEMICOLON expr::exr2 RIGHTPAREN statements:stmts
               | FOR LEFTPAREN  SEMICOLON expr:exr SEMICOLON  RIGHTPAREN statements:stmts
               | FOR LEFTPAREN expr:exr SEMICOLON expr:exr2 SEMICOLON  RIGHTPAREN statements:stmts;

/******* Condition Statement *******/
cond_stmt         ::= If_then_else_statement
                     | If_then_statement_multi_task 
                     | If_then_statement;

If_then_statement ::=   IF LEFTPAREN expr RIGHTPAREN statements ;
If_then_statement_multi_task  ::=   IF LEFTPAREN expr RIGHTPAREN LEFTAKULAD statements RIGHTAKULAD;
If_then_else_statement ::= IF LEFTPAREN expr RIGHTPAREN Statement_no_short_if ELSE statements ;

/******* Return Statement *******/
ReturnStmt          ::= RETURN expr:e SEMICOLON
                      {:
                          RESULT = new SimpleNode(NodeType.RETURN_STATEMENT);
                          RESULT.addChild(eon);
                      :}
                      | RETURN SEMICOLON;

/******** Break Statement *********/
BreakStmt           ::= BREAK SEMICOLON;

/******** Continue Statement *********/
ContinueStmt        ::= CONTINUE SEMICOLON;

/******* Print Statement ********/
PrintStmt           ::= PRINT LEFTPAREN expr RIGHTPAREN SEMICOLON;
